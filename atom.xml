<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Two Cents]]></title>
  <link href="http://bfeng.github.io/atom.xml" rel="self"/>
  <link href="http://bfeng.github.io/"/>
  <updated>2016-07-20T22:27:36-04:00</updated>
  <id>http://bfeng.github.io/</id>
  <author>
    <name><![CDATA[Bo Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn the Trie Data Structure]]></title>
    <link href="http://bfeng.github.io/blog/2015/01/20/learn-the-trie-data-structure/"/>
    <updated>2015-01-20T17:00:41-05:00</updated>
    <id>http://bfeng.github.io/blog/2015/01/20/learn-the-trie-data-structure</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Trie is a tree data structure, which is very useful in many aspects, such as word count and statistics. It stores data in sorted order, so its retrieval is faster than other data structures in some cases. This tutorial introduces some resources of helping to learn and understand this data structure.</p>

<!--more-->


<h2>Comprehensive Overview</h2>

<p>The most comprehensive source to learn trie is <a href="http://en.wikipedia.org/wiki/Trie">this page</a> from Wikipedia. This wikipage describes its pronunciation: ‘tree’ or ‘try’, its applications in dictionary representation, sorting, full-text search and many others.</p>

<h2>Trie in an Algorithm Book</h2>

<p>Trie is covered in this Java algorithm book. This book introduces 50 algorithms that developers should know. The source code is shown online at <a href="http://algs4.cs.princeton.edu/code/">http://algs4.cs.princeton.edu/code/</a></p>

<h2>Nice Illustration of Trie</h2>

<p>Further more, Anna from Toptal posted <a href="http://www.toptal.com/java/the-trie-a-neglected-data-structure">a very nice page of Trie</a>. In her post, a simple game is used as a vivid example to show the usefulness of Trie. Then, some more decent and clear illustration figures were given out so that it is easy for readers to understand this data structure and its performance in advantage. I highly recommend that readers who want to learn Trie read her post and source code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Blogging With Python Flask]]></title>
    <link href="http://bfeng.github.io/blog/2014/11/25/markdown-blogging-with-python-flask/"/>
    <updated>2014-11-25T17:42:32-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/11/25/markdown-blogging-with-python-flask</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="http://flask.pocoo.org/">Flask</a> is a popular lightweight Python web MVC framework. Compared to <code>Django</code>, Flask  based projects are usually simpler to implement and easier to maintain. Flask is BSD licensed and developed by Pocono team.</p>

<p>This tutorial shows how to use Flask and how to integrate a Markdown parser/render into Flask.</p>

<!--more-->


<h2>Implementation</h2>

<p>Flask based project has no file structure requirements. Python programs, view templates and static files such as javascript files, stylesheets and images can be organized freely. Here are the steps to implement it.</p>

<h3>Create a project folder</h3>

<pre><code>mkdir pyblog
</code></pre>

<h3>Install Prerequisites</h3>

<pre><code>pip install Flask
pip install Jinja2
pip install Flask-Misaka
</code></pre>

<h3>Initiate the blogging program</h3>

<p>Create a python file namely <code>blog.py</code>. The code below gives an example to use Flask and view templates. <code>index.html</code> is a <code>Jinja2</code> template. The full code is shown in the appendix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">,</span> <span class="n">template_folder</span><span class="o">=</span><span class="s">&quot;views&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run this project</h3>

<p>Running the project is straightforward like executing a normal python script.</p>

<pre><code>python blog.py
</code></pre>

<h2>Integrate Markdown Renderer with Blogging Platform</h2>

<p><a href="http://pythonhosted.org//Flask-Misaka/">Flask-Misaka</a> is a project integrate Misaka with Flask. <a href="http://misaka.61924.nl/">Misaka</a> is a python binding for <a href="https://github.com/vmg/sundown">Sundown</a>, which is a Markdown processing library in C.</p>

<p>The code below shows how Flask-Misaka is integrated into Flask. After <code>app</code> is initialized by Flask, wrap <code>app</code> by Misaka: <code>Misaka(app)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask.ext.misaka</span> <span class="kn">import</span> <span class="n">Misaka</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name</span><span class="p">,</span> <span class="n">template_folder</span><span class="o">=</span><span class="s">&quot;views&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Misaka</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After <code>app</code> is initialized, <code>markdown</code> can be used in <code>jinja2</code> templates. The code below shows <code>text</code> is rendered by <code>markdown</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ text|markdown }}</span></code></pre></td></tr></table></div></figure>


<p>The markdown content is written in <code>readme.md</code>, which is rendered into a web page. The code below opens the file and stores the text into <code>content</code>, which is rendered in the template.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;readme.md&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>  <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&quot;index.html&quot;</span><span class="p">,</span> <span class="n">text</span> <span class="o">=</span> <span class="n">content</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This tutorial introduces Flask and Flask-Misaka, which integrates Markdown into web framework. The code shown in the appendix is not supposed for production use. It focuses on basic examples of Flask and markdown integration.</p>

<h2>Appendix</h2>

<p>blog.py</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask.ext.misaka</span> <span class="kn">import</span> <span class="n">Misaka</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">,</span> <span class="n">template_folder</span><span class="o">=</span><span class="s">&quot;views&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Misaka</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;readme.md&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">&#39;index.html&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>views/index.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>    &lt;title&gt;My Markdown blogging site&lt;/title&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>    {{ text|markdown }}
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>readme.md</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># My Title
</span><span class='line'>
</span><span class='line'>## This is my blog with Markdown</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make a Windows Program]]></title>
    <link href="http://bfeng.github.io/blog/2014/10/04/how-to-make-a-windows-program/"/>
    <updated>2014-10-04T17:57:38-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/10/04/how-to-make-a-windows-program</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is a tutorial of how to make a Windows program. It is just more like a hello-world program but implemented in Windows C. Windows C inherits from ANSI C but has many different features, including special data structures, system functions and even design patterns.</p>

<p>This tutorial introduces the basic elements of Windows programs, such as main entry functions, window class registration, window class creation, control procedure, message loop and so on. Please note that the code in this tutorial is <em>not</em> for production use.</p>

<!--more-->


<h2>How to setup compilers</h2>

<p>The first step to write a real application is to setup its compilers. <code>MinGW</code> is an open source compiler suite, including <code>GCC for C, C++, Fortran, Java, and Ada</code>, <code>binutils</code>, <code>Windows API, runtime</code>, and <code>make</code>. The following steps guide how to setup <code>MinGW</code> on Windows. In this tutorial, we use <code>MinGW-gcc</code> as the compiler for C and its runtime library to run the application on Windows.</p>

<h3>Download and install <code>MinGW</code></h3>

<p>The official site of <code>MinGW</code> gives a premium guide of how to: <a href="http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite.">http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite.</a></p>

<p>The summary of this guide are:</p>

<ol>
<li>download a suitable installer</li>
<li>extract and run the installer</li>
<li>setup <code>MinGW\bin</code> in the <code>PATH</code> environment variable</li>
</ol>


<p>To verify your installation, just open a console and test some commands, such as <code>gcc</code> and <code>make</code>.</p>

<h2>The basic elements of a Windows application</h2>

<h3>The main function</h3>

<p>The following is the main function example of Windows applications. Instead of using the <code>main</code> for ANSI C applications, the main function is defined as <code>WinMain</code> under Windows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Main function */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">APIENTRY</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">LPSTR</span>     <span class="n">lpCmdLine</span><span class="p">,</span>
</span><span class='line'>                     <span class="kt">int</span>       <span class="n">nCmdShow</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Windows applications, each instance of an application is controlled by a <code>handle</code>, the structure of which is defined as <code>HINSTANCE</code>. So int <code>WinMain</code>, the first two arguments are instance handles of applications. <code>hInstance</code> is the handle to the current instance of the application. <code>hPrevInsance</code> is the handle to previous instance of the applications. However, the <em>previous</em> here is varied by cases. In addition to the third and fourth arguments, please refer to the official documentation of this function <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633559(v=vs.85).aspx">here</a>.</p>

<h3>Register a window class</h3>

<p>A Windows application composites of a class of windows. Before creating a visible application under graphic environment, a new window class should be defined and registered in the system. The data structure <code>WNDCLASSEX</code> used with <code>RegisterClassEx</code> can define and register the window class. Below is an example of a window class in main function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="n">className</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;MyWindowClass&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Main function */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">APIENTRY</span> <span class="nf">WinMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hInstance</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">HINSTANCE</span> <span class="n">hPrevInstance</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">LPSTR</span>     <span class="n">lpCmdLine</span><span class="p">,</span>
</span><span class='line'>                     <span class="kt">int</span>       <span class="n">nCmdShow</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">WNDCLASSEX</span> <span class="n">winClass</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">cbSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WNDCLASSEX</span><span class="p">);</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">lpfnWndProc</span> <span class="o">=</span> <span class="n">WndProc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">cbClsExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">hInstance</span> <span class="o">=</span> <span class="n">hInstance</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">hIcon</span> <span class="o">=</span> <span class="n">LoadIcon</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">IDI_APPLICATION</span><span class="p">);</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">hCursor</span> <span class="o">=</span> <span class="n">LoadCursor</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">IDC_ARROW</span><span class="p">);</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">lpszMenuName</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">lpszClassName</span> <span class="o">=</span> <span class="n">className</span><span class="p">;</span>
</span><span class='line'>  <span class="n">winClass</span><span class="p">.</span><span class="n">hIconSm</span> <span class="o">=</span> <span class="n">LoadIcon</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">IDI_WINLOGO</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* Register window class*/</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">RegisterClassEx</span><span class="p">(</span><span class="o">&amp;</span><span class="n">winClass</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MessageBox</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="s">&quot;Window Registration Failed!&quot;</span><span class="p">,</span> <span class="s">&quot;Errors!&quot;</span><span class="p">,</span> <span class="n">MB_ICONERROR</span> <span class="o">|</span> <span class="n">MB_OK</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, <code>winClass</code> is the variable of the <code>WNDCLASSEX</code> structure, and some properties are initialized. Calling <code>RegisterClassEx(&amp;winClass)</code> is to register the class in Windows environment. Then, the window class can be used in the rest of the program.</p>

<h3>The control procedure</h3>

<p>In the above code, <code>lpfnWndProc</code> is an important but intentionally omitted property. This property is a function pointer of a <em>windows procedure</em>. A windows procedure is a special function, used to control the message events from a class of window. Its definition is like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Windows Event Handler */</span>
</span><span class='line'><span class="n">LRESULT</span> <span class="n">CALLBACK</span> <span class="nf">WndProc</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hwnd</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">message</span><span class="p">,</span> <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">DefWindowProc</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">lParam</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the function name is freely defined by programmers, but the argument list should be the same as the above example. The return result should be the result from <code>DefWindowProcW</code> So, the part of the register code should be revised like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">winClass</span><span class="p">.</span><span class="n">lpfnWndProc</span> <span class="o">=</span> <span class="n">WndProc</span><span class="p">;</span> <span class="c1">// pointer to WndProc</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Create a window</h3>

<p>Finally, we can create an visible application in Windows by using the event loop of windows. As I mentioned above, windows applications are event-driven programming model. Event-driven model means every operation of an application may trigger an event and all the events are handled within the handling loop. Once the loop stops, the application is about to exit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cm">/* Create window */</span>
</span><span class='line'><span class="n">hwnd</span> <span class="o">=</span> <span class="n">CreateWindowEx</span><span class="p">(</span>
</span><span class='line'>        <span class="n">WS_EX_TOOLWINDOW</span><span class="p">,</span>
</span><span class='line'>        <span class="n">winClass</span><span class="p">.</span><span class="n">lpszClassName</span><span class="p">,</span>
</span><span class='line'>        <span class="n">className</span><span class="p">,</span>
</span><span class='line'>        <span class="n">WS_OVERLAPPEDWINDOW</span><span class="p">,</span>
</span><span class='line'>        <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="n">CW_USEDEFAULT</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">hInstance</span><span class="p">,</span> <span class="nb">NULL</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Show the window</h3>

<p>Two simple functions are used to show the created window, otherwise the window is hidden from the graphics. Please refer to documents of <code>ShowWindow</code> and <code>UpdateWindow</code> on MSDN <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548(v=vs.85).aspx">here</a> and <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd145167(v=vs.85).aspx">here</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ShowWindow</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span> <span class="n">SW_SHOW</span><span class="p">);</span>
</span><span class='line'><span class="n">UpdateWindow</span><span class="p">(</span><span class="n">hwnd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Message Loop</h3>

<p>The Windows C programming model is message looping, which means all behaviors are converted to messages and all messages are either sent or received by appropriated functions. The messages are finally passed to the control procedure.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">GetMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">TranslateMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DispatchMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More details in the control procedure</h3>

<p>As we mentioned that Windows C program is designed in message-loop pattern, all the behaviors are converted to messages. The control procedure gives programmers a chance that can trap system and application behaviors in a loop of messages. So a common implemention ion of the control procedure is a big switch-case block. In this switch-case block, there are system message cases, such as <code>WM_CREATE</code>, <code>WM_PRINT</code>, <code>WM_CLOSE</code> and <code>WM_DESTROY</code>. These four messages are emitted from Windows system. In addition, applications can also emit their own messages. We won&rsquo;t discuss message customization in this tutorial. For example, the following gives the implemention that two types of messages are trapped in the loop: <code>WM_CLOSE</code> and <code>WM_DESTROY</code>. <code>WM_CLOSE</code> is a message sent to applications to indicate that this window or application should terminate. So we call <code>DestroyWindow</code> function in this case. <code>WM_DESTROY</code> is a message to indicate that the window is removed from the screen after destroying. For the explanation of <code>DestroyWindow</code> and <code>PostQuitMessage</code>, please refer to documents on MSDN <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms632682(v=vs.85).aspx">here</a> and <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms644945(v=vs.85).aspx">here</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Windows Event Handler */</span>
</span><span class='line'><span class="n">LRESULT</span> <span class="n">CALLBACK</span> <span class="nf">WndProc</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hwnd</span><span class="p">,</span> <span class="n">UINT</span> <span class="n">message</span><span class="p">,</span> <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">WM_CREATE</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">WM_PAINT</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">WM_CLOSE</span><span class="p">:</span>
</span><span class='line'>      <span class="n">DestroyWindow</span><span class="p">(</span><span class="n">hwnd</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">WM_DESTROY</span><span class="p">:</span>
</span><span class='line'>      <span class="n">PostQuitMessage</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">DefWindowProc</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">lParam</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We present how to install <code>MinGW</code>, and the basic elements of a Windows application. We simply introduced and explained what <code>MinGW</code> is and the design pattern of a bare example of a Windows application. As we know, Windows development has evolved into a stage, at which this kind of C implementation might be no longer used, however, this example can help to understand other frameworks, such as <code>MFC</code> and <code>C#</code>, because they either use wrappers for many functions in C or build functions on top of C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I/O Benchmarks on Linux]]></title>
    <link href="http://bfeng.github.io/blog/2014/08/30/i-slash-o-benchmarks-on-linux/"/>
    <updated>2014-08-30T21:39:38-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/08/30/i-slash-o-benchmarks-on-linux</id>
    <content type="html"><![CDATA[<p>Benchmarks are useful tools, which help to understand system performance in a simple manner. This is because that sometimes applications are too complicated to identify which part is the bottleneck. Another reason is the security. When the data usage or application algorithms are private, profiling these applications are not allowed. For some reasons, benchmarks can represent the performance-critical parts in applications.</p>

<p>There are many benchmarks under Linux platform, some of which are also applicable for any POSIX compliant systems.</p>

<!--more-->


<h2>dd</h2>

<p><code>dd</code> command is to copy files from destination to target place. It invloves many aspects of copying.</p>

<p><a href="http://www.computerhope.com/unix/dd.htm">This</a> is a post, showing the description of this command and examples of usage.</p>

<h2>iozone</h2>

<p><code>iozone</code> is a file system benchmark, which can measure many aspects of performance for file systems.
The official documentation is the best to learn <code>iozone</code>. It can be downloaded from its offical website: <a href="http://www.iozone.org/">http://www.iozone.org/</a></p>

<p><em>To be continued&hellip;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The C10K Problem &rarr;]]></title>
    <link href="http://bfeng.github.io/blog/2014/08/04/the-c10k-problem/"/>
    <updated>2014-08-04T23:32:13-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/08/04/the-c10k-problem</id>
    <content type="html"><![CDATA[<p>The C10K Problem is well-known for the web servers cannot handle ten thousands concurrent connectioins. The post is mostly known as the source of desciption of this problem and the solutions to how to solve under Linux platform.</p>

<p>Please click the title to go to the original source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://bfeng.github.io/blog/2014/07/11/hello-octopress/"/>
    <updated>2014-07-11T11:12:47-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/07/11/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is first post from octopress. Octopress is an awesome blogging framework, which provides many handful facilities.</p>

<!--more-->


<h2>Source commands</h2>

<p>Many handful functionalites are wrapped in the <code>Rakefile</code>, which is a definetion file for <code>rake</code> commond. Basicly, the commands defined are:</p>

<ul>
<li>install[]: the initial setup for Octopress to install a theme</li>
<li>generate: generate Jekyll site</li>
<li>watch: watch the site changes and regenerate if necessary</li>
<li>preview: launch a local website and preview in a web browser</li>
<li>new_post[]: make a new post in the <code>_post</code> folder</li>
<li>new_page[]: make a new page</li>
<li>update_style: move sass to sass.old, install sass theme updates</li>
<li>update_source: move source to source.old</li>
<li>gen_deploy: generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch (from <a href="http://octopress.org/docs/deploying/github/" title="Octopress Documentation">1</a>).</li>
</ul>


<h2>Useful plugins</h2>

<h3>Codeblock</h3>

<p>Normally the Markdown paraser in Jekyll can convert the line starts with a double indent into a code block, like this:</p>

<pre><code>This is a line of code!
</code></pre>

<p>However, Codeblock does more than that&ndash;it provides language highlights with/without line numbers.
The following is line of python code.</p>

<p>In the source code, it is typed like this:</p>

<pre><code>{% codeblock lang:python %}
print "Hello, world"
{% endcodeblock %}
</code></pre>

<p>Then, the codeblock above will be rendered like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;Hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Video Tag</h3>

<p>The video tag is very userful, when a video is displayed on the web page.
The usage and example can be found here: <a href="http://octopress.org/docs/plugins/video-tag/" title="Video Tag">2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Processing With PyCuda]]></title>
    <link href="http://bfeng.github.io/blog/2014/07/09/image-processing-with-pycuda/"/>
    <updated>2014-07-09T15:57:20-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/07/09/image-processing-with-pycuda</id>
    <content type="html"><![CDATA[<p>This blog shows an example of how to use GPU to convert color images to grayscale.</p>

<!--more-->


<h2>Build Cuda source module with Python</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">module</span> <span class="o">=</span> <span class="n">SourceModule</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">    __global__ void histograms(float * hist_rgb, unsigned char * pix, int total)</span>
</span><span class='line'><span class="s">    {</span>
</span><span class='line'><span class="s">      int idx = threadIdx.x + blockDim.x * blockIdx.x;</span>
</span><span class='line'><span class="s">      if(idx &gt;= total) return;</span>
</span><span class='line'>
</span><span class='line'><span class="s">      __shared__ float local_hist[256];</span>
</span><span class='line'>
</span><span class='line'><span class="s">      if(threadIdx.x &lt; 256)</span>
</span><span class='line'><span class="s">        local_hist[threadIdx.x] = 0;</span>
</span><span class='line'>
</span><span class='line'><span class="s">      __syncthreads();</span>
</span><span class='line'>
</span><span class='line'><span class="s">      int pixel = pix[idx];</span>
</span><span class='line'><span class="s">      atomicAdd((float *)&amp;local_hist[pixel], 256.0/total);</span>
</span><span class='line'>
</span><span class='line'><span class="s">      if(threadIdx.x &lt; 256)</span>
</span><span class='line'><span class="s">        atomicAdd((float *)&amp;hist_rgb[threadIdx.x], local_hist[threadIdx.x]);</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">    __global__ void enhance(unsigned char * pix, float * hist_rgb, int total)</span>
</span><span class='line'><span class="s">    {</span>
</span><span class='line'><span class="s">      int idx = threadIdx.x + blockDim.x * blockIdx.x;</span>
</span><span class='line'><span class="s">      if(idx &gt;= total) return;</span>
</span><span class='line'><span class="s">      int pixel = pix[idx];</span>
</span><span class='line'><span class="s">      pix[idx] = (int)(hist_rgb[pixel]);</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">    &quot;&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">histograms</span>     <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span><span class="s">&quot;histograms&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">enhance</span>    <span class="o">=</span> <span class="n">module</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span><span class="s">&quot;enhance&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use within Python code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">THREADS_PER_BLOCK</span> <span class="o">=</span> <span class="mi">512</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gpu_enhanceImage</span><span class="p">(</span><span class="n">pic</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># convert to array</span>
</span><span class='line'>    <span class="n">pix</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'>    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">pic</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ------------------------------------------------</span>
</span><span class='line'>    <span class="c"># accelerate the following part as much as possible using GPU</span>
</span><span class='line'>    <span class="c">#</span>
</span><span class='line'>    <span class="c"># compute histograms for RGB components separately</span>
</span><span class='line'>    <span class="c"># the value range for each pixel is [0,255]</span>
</span><span class='line'>    <span class="n">hist_rgb</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">256</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hist_rgb_buffer</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="n">hist_rgb</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pix</span> <span class="o">=</span> <span class="n">pix</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hist_rgb_gpu</span> <span class="o">=</span> <span class="n">cuda</span><span class="o">.</span><span class="n">mem_alloc</span><span class="p">(</span><span class="n">hist_rgb_buffer</span><span class="o">.</span><span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pix_gpu</span> <span class="o">=</span> <span class="n">cuda</span><span class="o">.</span><span class="n">mem_alloc</span><span class="p">(</span><span class="n">pix</span><span class="o">.</span><span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">hist_rgb_buffer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">pix_gpu</span><span class="p">,</span> <span class="n">pix</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">histograms</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">pix_gpu</span><span class="p">,</span>
</span><span class='line'>         <span class="n">numpy</span><span class="o">.</span><span class="n">int32</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'>         <span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>         <span class="n">grid</span><span class="o">=</span><span class="p">((</span><span class="n">total</span> <span class="o">+</span> <span class="n">THREADS_PER_BLOCK</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_dtoh</span><span class="p">(</span><span class="n">hist_rgb_buffer</span><span class="p">,</span> <span class="n">hist_rgb_gpu</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hist_rgb</span> <span class="o">=</span> <span class="n">hist_rgb_buffer</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># compute the accumulative histograms</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">intensity</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="p">]</span> <span class="o">+</span> <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="c"># take care of rounding error</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="mi">256</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># enhance the picture according to the inversed histgram</span>
</span><span class='line'>    <span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">hist_rgb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">enhance</span><span class="p">(</span><span class="n">pix_gpu</span><span class="p">,</span> <span class="n">hist_rgb_gpu</span><span class="p">,</span>
</span><span class='line'>      <span class="n">numpy</span><span class="o">.</span><span class="n">int32</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'>      <span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>      <span class="n">grid</span><span class="o">=</span><span class="p">((</span><span class="n">total</span> <span class="o">+</span> <span class="n">THREADS_PER_BLOCK</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_dtoh</span><span class="p">(</span><span class="n">pix</span><span class="p">,</span> <span class="n">pix_gpu</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># -----------------------------------------------</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># save the picture</span>
</span><span class='line'>    <span class="n">pic</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">pix</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pic</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For each image, the function <code>enhanceImage</code> does three steps enhancement:

<ul>
<li>calculate the histogram of 256 color used in the image</li>
<li>accumulate the histogram calculated in step one</li>
<li>assign each pixel of the image according to the inversed histogram</li>
</ul>
</li>
<li>In step one and three, we could parallelize the program in GPU. Step two is a simple 256 iteration loop which should be pretty fast on CPU and there is data dependency, therefore we’d better do it in CPU.</li>
<li>To do the acceleration in GPU, my implementation uses one thread per pixel of the image. Each thread reads the pixel out and adds its value to the appropriated position in the histogram.

<ul>
<li>Threads in the same block can share the local memory which is faster than the global memory, so in each block the threads are using the shared memory to calculate the histogram.</li>
<li>After the local shared histogram is calculated out, the first 256 threads add the value of the local histogram to the global one.</li>
</ul>
</li>
<li>The data movement between CPU and GPU via Cuda APIs:

<ul>
<li><code>cudaMelloc</code> can allocate the space in GPU’s display memory</li>
<li><code>cudaMellocpy</code> can copy the data from the main memory to the display memory and vice versa.</li>
<li><code>cudaFree</code> can release the memory space used in GPU</li>
</ul>
</li>
<li>Optimization:

<ul>
<li>Use shared memory as much as possible. Because the shared memory in a block is 100x faster than the global memory.</li>
<li>In my implementation, <code>atomicAdd</code> is used, because the histogram might be accessed by more than one thread. However, this could be a performance bottleneck of the overall GPU program. So I tried to use a large global memory to avoid the conflicts, but the memory was becoming the new performance bottleneck. To keep the program neat, I still decided to use <code>atomicAdd</code>.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Tutorial Day 2]]></title>
    <link href="http://bfeng.github.io/blog/2014/05/21/java-tutorial-day-2/"/>
    <updated>2014-05-21T22:52:11-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/05/21/java-tutorial-day-2</id>
    <content type="html"><![CDATA[<h2>Introduction to Console I/O</h2>

<p>I/O, which is short for <strong>Input and Output</strong>, is an important part in any programming language. So is in Java. Today we only refer the console I/O as the standard input and output in a console, which is also the simplest way how users interact with a program.</p>

<!--more-->


<h2>Input and Output Usage</h2>

<p>When a program is running in the console, it often requires users to input some characters, such as parameters, records and text. The program may also print some characters to the console in order to notify the information to users.</p>

<p>The output operation often involves the the array of characters and other variable types conversion, however the output operation in Java is simplified by providing many methods, so that programmers don&rsquo;t need to worry too much in output. When programmers compose the code to handle the input, it is often more complicated.</p>

<p><code>System</code> class provides the standard input and output facilities, which are described in the following.</p>

<h3>Input Usage</h3>

<p>The console input is Java is encapsulated in <code>System.in</code>, which is a <code>static InputStream</code>. A input stream could be imaged like a stream of bytes, from which program can read bytes. So from <code>System.in</code>, programs can read users&#8217; input from the console.</p>

<p>For the conversion reason, consoles may only accept characters, which should be converted into other types, such as integers. However, due to the consideration that <a href="http://www.microsoft.com/mspress/books/sampchap/5957.aspx">all input is evil</a>, programmers need to validate all the input data.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleEcho1</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">64</span><span class="o">];</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>          <span class="o">||</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">buffer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="o">))</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;&gt; &quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">buffer</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code gives an example of how to read byte array from <code>System.in</code>, how to covert the byte array into <code>String</code> and print on the console by <code>System.out</code>. <code>buffer</code> is an array of byte, which is used to store users&#8217; input content. In the line <code>System.out.print</code>, <code>new String</code> is used to convert the byte array into a string, so that the program can print the content into console.</p>

<p>The following gives a more sophisticated example, which uses <code>InputStreamReader</code> and <code>BufferedReader</code> to wrap the input stream. The reason is documented in the Java API documentations:</p>

<blockquote><p>In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsoleEcho2</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&gt; &quot;</span> <span class="o">+</span> <span class="n">line</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Output Usage</h3>

<p>The output operations is less complicated than the input. <code>System.out</code> is actually <code>static final PrintStream</code>, which provides many format and print methods. All these could be referred from the official Java API docs: <a href="http://docs.oracle.com/javase/7/docs/api/java/io/PrintStream.html">http://docs.oracle.com/javase/7/docs/api/java/io/PrintStream.html</a>.</p>

<h2>Practice</h2>

<p>Please design and implement a program, which allows users to input a positive number each line. After users hit enter key, the program prints out all users&#8217; input in an ascending order.</p>

<p>For example:</p>

<pre><code>&gt; Enter a number:
&gt; 3
&gt; Sorted: 3
&gt; Enter a number:
&gt; 5
&gt; Sorted: 3, 5
&gt; Enter a number:
&gt; 1
&gt; Sorted: 1, 3, 5
&gt; Enter a number:
&gt; 21
&gt; Sorted: 1, 3, 5, 21
&gt; Enter a number:
&gt; 20
&gt; Sorted: 1, 3, 5, 20, 21
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Tutorial Day 1]]></title>
    <link href="http://bfeng.github.io/blog/2014/05/13/java-tutorial-day-1/"/>
    <updated>2014-05-13T18:19:23-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/05/13/java-tutorial-day-1</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Primitive data types are the basic data types used in Java. With primitive data types and arrays of them, many questions could be solved now. This post will cover what the primitive data types are and usage of the 1-d array of them. The control flow helps to build more complex program execution.</p>

<!--more-->


<h2>Primitive data types</h2>

<p>Java is a static typed language as we described on <a href="2014/03/java-tutorial-day-0.html">Day 0</a>. This  feature requires the compiler knows the variable data types before usage. In practice, programmers have to declare which type the variable is.</p>

<p>In Java, there are eight data types, called primitive data types,  because the
usage of them is different from other Java object variables and all other Java
classes are built by using them.</p>

<p>The table below shows these eight primitive data types and their default values. Default values are the values when those variables are declared. The default values prevent the variables are not allocated memory space.</p>

<table>
    <caption>Table: Default values for the primitive data types</caption>
    <tr>
        <th>Data Types</th>
        <th>Default Values (for fields)</th>
    </tr>
    <tr>
        <td>byte</td>
        <td>0</td>
    </tr>
    <tr>
        <td>short</td>
        <td>0</td>
    </tr>
    <tr>
        <td>int</td>
        <td>0</td>
    </tr>
    <tr>
        <td>long</td>
        <td>0L</td>
    </tr>
    <tr>
        <td>float</td>
        <td>0.0f</td>
    </tr>
    <tr>
        <td>double</td>
        <td>0.0d</td>
    </tr>
    <tr>
        <td>char</td>
        <td>&#8216;\u0000&#8217;</td>
    </tr>
    <tr>
        <td>boolean</td>
        <td>false</td>
    </tr>
</table>


<p>Source: <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></p>

<p>Please refer <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">this page</a> for more details of what these primitive data types are.</p>

<h2>Array and java specialty</h2>

<h3>Basic usage</h3>

<p>Using primitive data types are not enough to build many variables. <code>Array</code> is used to declare as many the same type of variables as programmers want. An <code>Array</code> is a structure, which contains a serial of the same variables. Programs can access each element in the array by specifying a fixed <code>index</code>.</p>

<pre><code>public class ArrayDemo1 {
    public static void main(String[] args) {
        int[] arr1;
        arr1 = new int[2];
        System.out.println(arr1[0]);
        System.out.println(arr1[1]);

        int[] arr2 = {1, 2};
        System.out.println(arr2[0]);
        System.out.println(arr2[1]);
    }
}
</code></pre>

<p>The example above shows two kinds of declaration of arrays. <code>int[] arr1</code> first declares  <code>arr1</code> is an array of integers. <code>arr1 = new int[2]</code> allocates the memory for two integers. Since we don&rsquo;t specify the initial values for each element, the element values in <code>arr1</code> should be <code>0</code> by default. <code>int[] arr2 = {1, 2}</code> declares variable name, allocates memory for two integers and gives out the initial values of the two integers: <code>1</code> and <code>2</code>.</p>

<h3>Array length</h3>

<p>Java array has a special property named <code>length</code>, which is quite useful to get the length of this array. The usage is quite simple as <code>arr1.length</code> and <code>arr2.length</code> for the variables in the above example.</p>

<h2>Control flow statements</h2>

<p>All the statements are generally executed from top to bottom and line by line. Control flow statements are the statements can break the normal work flow of the execution. Programmers can break, branch and set conditions to control the execution of programs. More specifically, the following list shows the basic control syntax in Java.</p>

<ul>
<li>if else

<ul>
<li>else if</li>
</ul>
</li>
<li>switch case</li>
<li>for</li>
<li>while</li>
<li>do while</li>
<li>break</li>
<li>continue</li>
<li>return</li>
</ul>


<p>More examples and explanations could be found here: <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html">http://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html</a></p>

<h2>Practice</h2>

<p>A prime number is a natural number greater than 1 that has no positive divisor other than 1 and itself. (<a href="http://en.wikipedia.org/wiki/Prime_number">Wikipedia</a>)</p>

<p>Please write a program to produce all the primes less than 1000. The output should be like this:</p>

<pre><code>2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Tutorial Day 0]]></title>
    <link href="http://bfeng.github.io/blog/2014/03/02/java-tutorial-day-0/"/>
    <updated>2014-03-02T01:13:25-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/03/02/java-tutorial-day-0</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Java is a computer programming language, which was invented by <a href="http://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</a> and now has been merged into <a href="http://en.wikipedia.org/wiki/Oracle_Corporation">Oracle Corporation</a>. Java was originally designed by a Canadian computer scientist <a href="http://en.wikipedia.org/wiki/James_Gosling">James Gosling</a> when he worked at Sun Microsystems.</p>

<!--more-->


<p>Java is a distinguished language due to many features that other languages do not have. It is a static language but it does not run by the native code, like C or C++.
It is interpreted at runtime but it is not dynamic typed like Perl, Python, PHP, etc. It is compiled into a platform neutral byte code, which is then interpreted by the Java Virtual Machine (JVM).</p>

<pre><code>+-------+    +--------+    +-----+
| .java | -&gt; | .class | -&gt; | JVM |
+-------+    +--------+    +-----+
</code></pre>

<h2>Setup JDK</h2>

<p>JDK, which is short of Java Development Kit, is a set of tools used to develop Java programs. Before one can compile and run a Java program, the JDK should be installed. Here there are two commands users should get familiar:</p>

<ol>
<li><p>javac</p>

<p> <code>javac</code> is a program which compiles the Java source code into byte code.</p></li>
<li><p>java</p>

<p> <code>java</code> is a program which start up a JVM and run Java byte code.</p></li>
</ol>


<p>So the above figure should be like this:</p>

<pre><code>+-------+             +--------+
| .java | -&gt; javac -&gt; | .class | -&gt; java
+-------+             +--------+
</code></pre>

<h3>Download and Installation</h3>

<p>There are many distributions of JDK. The two representatives of them are from Oracle or OpenJDK project. They are free to download and use. For the convince, I assume the JDK is version 7 from Oracle in the following.</p>

<h3>Setup System Environment Variables</h3>

<p>This questions and answers give out a clear definition and usage about environment variables. Please refer them <a href="http://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them">here</a>.</p>

<p>For Windows users with GUI available, this <a href="http://www.computerhope.com/issues/ch000549.htm">post</a> is more friendly.</p>

<p>Add <code>JAVA_HOME</code> variable. <code>JAVA_HOME</code> variable is used by many famous java programs such as <code>maven</code>, <code>ant</code>, <code>hadoop</code>, etc.</p>

<pre><code>JAVA_HOME=&lt; the folder path where you installed JDK &gt;
</code></pre>

<p>Add the <code>&lt; the folder path where you installed JDK &gt;\bin</code> to your existing <code>PATH</code>. Please note that do not replace your <code>PATH</code> variable in case you will not run other programs.</p>

<h2>Write your first Java program</h2>

<p>Here is the first java program, which does nothing than print a line <code>Hello, world!</code> in the console.</p>

<pre><code>public class HelloWorldApp {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}
</code></pre>

<p>The following are the steps of building and run this program:</p>

<ol>
<li>Save the above code into a file named <code>HelloWorldApp.java</code></li>
<li>Open your console and go to the folder contains <code>HelloWorldApp.java</code></li>
<li>Compile the code by <code>javac HelloWorldApp.java</code>, then if successful, there should be a file named <code>HelloWorldApp.class</code></li>
<li>Run the code by <code>java HelloWorldApp</code></li>
<li>The program should print <code>Hello, world!</code> on your screen.</li>
</ol>


<h2>One step further</h2>

<p>In the above code, <code>HelloWorldApp</code> is the class name. It should also be the file name, since it is the top level <code>public</code> class in the file. The method <code>public static void main</code> is the entry method for a Java program and the method arguments is <code>String[] args</code>, in which <code>String[]</code> refers the type as an array of <code>String</code> and <code>args</code> is the variable name. This arguments could be given from the command line when starting the program, like <code>java HelloWorldApp XXX</code>.</p>

<p>So let&rsquo;s change the source code like this:</p>

<pre><code>public class HelloWorldApp {
    public static void main(String[] args) {
        System.out.println("Hello, " + args[0]);
    }
}
</code></pre>

<p>Repeat the above steps of building this program: <code>javac HelloWorldApp.java</code>.
Run the program: <code>java HelloWorldApp XXX</code>. Then, the program should print <code>Hello, XXX</code> on your screen.</p>

<h2>Practice</h2>

<p>Write your third program which could print a figure in the console like the following:</p>

<pre><code>         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking Java Interview Questions]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/27/cracking-java-interview-questions/"/>
    <updated>2014-02-27T20:56:52-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/02/27/cracking-java-interview-questions</id>
    <content type="html"><![CDATA[<p>This questions are mainly from internet.</p>

<!--more-->


<ol>
<li><p>What do you know about Java?</p>

<p> Java is nothing but a high-level programming language from the Sun Microsystem, and now from Oracle Inc. It is released in the year 1995 and runs on multiple platforms like Linux, Windows, Mac and other variations of UNIX. <a href="http://en.wikipedia.org/wiki/James_Gosling">James Gosling</a> is known as the father of Java programming language.</p></li>
<li><p>Can you differentiate between J2SDK 1.5 and J2SDK 5.0?</p>

<p> There is no difference between J2SDK 1.5 and J2SDK 5.0. Sun Microsystems has just re-branded the versions. Since java 1.6, Java 6 and Java 7 are called for the version of 1.6 and 1.7, respectively.</p></li>
<li><p>Can you name a few platforms that support Java?</p>

<p> Yes, Java is supported by Windows, Mac as well as UNIX/Linux like Ubuntu, Red Hat, Sun Solaris, etc..</p></li>
<li><p>Could you tell me why Java is called Architectural Neutral?</p>

<p> The main reason is because the compiler creates an architecture neutral object file format. This makes the compiled code to be executable on different other processors.</p></li>
<li><p>What is the difference between an Interface and an Abstract class?</p>

<p> An abstract class can have instance methods that implement a default behavior. An Interface can only declare constants and instance methods, but cannot implement default behavior and all methods are implicitly abstract. An interface has all public members and no implementation. An abstract class is a class which may have the usual flavors of class members (<code>private</code>, <code>protected</code>, etc.), but has some abstract methods.</p></li>
<li><p>What is the purpose of garbage collection in Java, and when is it used?</p>

<p> The purpose of garbage collection is to identify and discard objects that are no longer needed by a program so that their resources can be reclaimed and reused. A Java object is subject to garbage collection when it becomes unreachable to the program in which it is used.</p></li>
<li><p>How do you implement a thread in Java?</p>

<p> In Java, there is <code>Thread</code> class that can be extended and <code>Runnable</code> interface that can be implemented. Since Java 1.6, there is a new interface <code>Callable</code>, which is also used as a thread interface but usually used as a concurrency task.</p></li>
<li><p>Is the Java method called by reference or by value?</p>

<p> Java does manipulate objects by reference, and all object variables are references. However, Java doesn&rsquo;t pass method arguments by reference; it passes them by value.</p></li>
<li><p>What is the difference between a constructor and a method?</p>

<p> A <code>final</code> class can&rsquo;t be extended ie., final class may not be extended. A final method can&rsquo;t be overridden when its class is inherited. You can&rsquo;t change value of a final variable (is a constant).</p></li>
<li><p>Difference between <code>Vector</code> and <code>ArrayList</code>?</p>

<p><code>Vector</code> is synchronized whereas <code>ArrayList</code> is not.</p></li>
<li><p>What is <code>static</code> in Java? And <code>final</code>?</p>

<p><code>static</code> means one per class, not one for each object no matter how many instance of a class might exist. This means that you can use them without creating an instance of a class. Static methods are implicitly final, because overriding is done based on the type of the object, and static methods are attached to a class, not an object. A static method in a super class can be shadowed by another static method in a subclass, as long as the original method was not declared final. However, you can&rsquo;t override a static method with a non-static method. In other words, you can&rsquo;t change a static method into an instance method in a subclass.</p></li>
<li><p>What are the different ways you can use <code>static</code>?</p>

<p><code>static</code> can be used in four ways: static variables, static methods, static classes and it can be used across a block of code in any class in order to indicate code that runs when a virtual machine starts and before the instances are created.</p></li>
<li><p>Do you think all property of Immutable Object needs to be final?</p>

<p>Not compulsory as we can easily achieve the same by making member as non-final but private and not changing them except in the constructor. Also, avoid providing setter methods for them. If it is a mutable object, then prevent leaking any reference for that member.</p></li>
<li><p>Can you brief me about Singleton Class?</p>

<p>It basically controls object creation, restricting the number to one while allowing the flexibility to create objects if the scenario changes.
Singleton is one of the design methods. It guarantees that there is only one instance at runtime.</p></li>
<li><p>In Java, what is the default value of float and double?</p>

<p>Default value of Float is <code>0.0f</code> while <code>0.0d</code> for Double.</p></li>
<li><p>Can you explain type erasure?</p>

<p>It is nothing but a JVM phenomenon, which means that the runtime has no idea about the types of generic objects like <code>List&lt;Integer&gt;</code>.</p></li>
<li><p>Explain Dot Operator.</p>

<p>It is used to access the instance variables and methods of class objects. Also, we can use it to access classes and sub-packages from a package.</p></li>
<li><p>What do you mean by Serialization in Java?</p>

<p>Well, serialization is nothing but a process of transforming objects into a stream of bytes. While deserialization is the opposite operation, which transforms the stream of bytes into an instance.</p></li>
<li><p>Can you tell me the reason why <code>String</code> class is considered immutable?</p>

<p>It is because to avoid change in <code>String</code> object once it is created. As String is immutable, you can share it between different threads in a safe way. This is quite crucial in multithreaded programming.</p></li>
<li><p>Can you quickly brief about <code>Map</code>, <code>HashMap</code>, <code>HashTable</code>, and <code>TreeMap</code>?</p>

<p><code>Map</code> is an interface, and <code>HashMap</code> is a class that implements a <code>Map</code>. It is not synchronized and supports null values and keys <code>HashTable</code> is a synchronized version of <code>HashMap</code>. <code>TreeMap</code> is similar to <code>HashMap</code> but uses <code>Tree</code> to implement <code>Map</code>.</p></li>
<li><p>Do you think not overriding <code>hashcode()</code> method has any performance implication?</p>

<p>A weak <code>hashcode</code> function will result into frequent collision in <code>HashMap</code>, which will at the end increase the time to add an object within <code>HashMap</code>.</p></li>
<li><p>Can you explain when and why Getters and Setters important?</p>

<p>We can put setters and getters within interfaces, which can hide implementation details. This allows us to make member variables public in Java. Getters and Setters are important to encapsulate Java class, which hide the direct accesses to member fields. This design is called <a href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">Plain Old Java Object (POJO)</a>.</p></li>
<li><p>Is it possible to import same package or class twice? Will the JVM load the package twice at runtime?</p>

<p>It is possible to import the same package or class more than one time. Also, it won’t have any effect on compiler or JVM. JVM will load the class for one time only, irrespective of the number of times you import the same class.</p></li>
<li><p>What is difference between Throw and Throws?</p>

<p>While Throw is used to trigger an exception, Throws is used in the declaration of exception. It is not possible to handle checked exception without Throws.</p></li>
<li><p>What is the significance of the order in which catch statements for <code>FileNotFoundException</code> and <code>IOException</code> are written?</p>

<p>It is crucial to consider the order as the <code>FileNoFoundException</code> is inherited from the <code>IOException</code>. Therefore, it is important that exception&rsquo;s subclasses caught first.</p></li>
<li><p>Can throw some light on Yielding and Sleeping?</p>

<p>When any task invokes its <code>yield()</code> method, it will return to the ready state. Whenever a task invokes <code>sleep()</code> method, it will return to the wait state.</p></li>
<li><p>Why you should use Vector class?</p>

<p>It provides the capability to implement a growable array of objects. It is quite useful when we don’t know the exact size of the array.</p></li>
<li><p>Can you tell me the number of bits used to represent Unicode, ASCII, UTF-16, and UTF-8 characters?</p>

<p>For Unicode 16 bits and ASCII needs 7 bits. However, ASCII is usually represented as 8 bits. UTF-8 presents characters through 8, 16 and 18 bit pattern. UTF-16 will require 16-bit and larger bit patterns.</p></li>
<li><p>What is Applets?</p>

<p>A small program based on Java that can be transformed from one computer to another using the Applet Viewer or web browser.</p></li>
<li><p>What is the use of Locale?</p>

<p>Locale is an object containing geographical, cultural and political information which helps in using custom codes and conventions of specific country or region for writing applications in that language.</p></li>
<li><p>What is the use of Java Package?</p>

<p>Java Package is useful for organizing projects containing multiple modules and protecting them from unauthorized access.</p></li>
<li><p>While working in the JVM, do we need to import java.lang package?</p>

<p>No, by default it is loaded in the JVM.</p></li>
<li><p>Can Applets communicate with each other?</p>

<p>Yes, they can communicate via shared static variables even if they belong to same of different classes.</p></li>
<li><p>Can a .java file support more than one java classes?</p>

<p>Yes, it can support more than one Java classes in a condition where one of them is a public class.</p></li>
<li><p>MAIN, NEXT, DELETE &amp; EXIT, which of these is a keyword in Java?</p>

<p>None of these is a keyword in Java</p></li>
<li><p>How to handle errors while writing or accessing Stored Procedures.</p>

<p>Store Procedure itself returns the error codes if any but, in case if it fails to do so, we can resort to catching SQL Exception.</p></li>
<li><p>From <code>ArrayList</code> and <code>LinkedList</code>, which one helps to perform an indexed search in a list of objects?</p>

<p><code>ArrayList</code></p></li>
<li><p>What is the use of <code>File</code> Class?</p>

<p>It helps in accessing files and directories of a local system. Note that both files and directories are represented by <code>File</code> class.</p></li>
<li><p>Does Java support Default arguments?</p>

<p>No, it does not support.</p></li>
<li><p>Describe life cycle of Applets?</p>

<p>Initialization, Starting, Stopping, Destroying &amp; Painting. Applets are not so useful nowadays. As to the rich client applications in the web world, <a href="http://en.wikipedia.org/wiki/Html5">HTML5</a> is the future.</p></li>
<li><p>What is the method applied to load an image in Applet class?</p>

<p>It’s <code>getImage</code>.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim4Lin: A Super Smooth Vim Configuration for Linux]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/26/vim4Lin_-a-super-smooth-vim-configuration-for-Linux/"/>
    <updated>2014-02-26T17:12:15Z</updated>
    <id>http://bfeng.github.io/blog/2014/02/26/vim4Lin_-a-super-smooth-vim-configuration-for-Linux</id>
    <content type="html"><![CDATA[<p>Recently I forked a project on Github.com, and renamed it to vim4Lin which is a vim configuration. The project can be used to help to synchronize the configuration files of vim on multiple machines. However, I intentionally want to focus its experiences on Linux, such as Ubuntu.
The project you can find in this following url: <a href="https://github.com/bfeng/vim4Lin">https://github.com/bfeng/vim4Lin</a></p>

<h2>Overview</h2>

<p>This is another vim configuration, which I normally use under terminal. So default theme is changed to <code>molokai</code>, which is optimized for C under terminals.</p>

<p>Vim related settings are in <code>plugin/settings/Settings.vim</code>, and other plugins&#8217; settings are in <code>plugin/settings</code> corresponding directories.</p>

<p>Two vimrc files:</p>

<ol>
<li><p><code>vimrc</code>, standard version vimrc.</p></li>
<li><p><code>gvimrc</code>, same as vimrc, but added some features only available in GUI mode.</p></li>
</ol>


<p>you can link your <code>~/.vimrc</code> to any one of them as you wish :)</p>

<p>It&rsquo;s a screenshot of the up-to-date configuration:</p>

<p><img src="https://github.com/bfeng/vim4Lin/blob/master/screenshots/Screenshot-c.png?raw=true" alt="image" /></p>

<p><img src="https://github.com/bfeng/vim4Lin/blob/master/screenshots/Screenshot-python.png?raw=true" alt="image" /></p>

<p>The content above is from <a href="http://flask.pocoo.org/snippets/5/">http://flask.pocoo.org/snippets/5/</a></p>

<h2>Installation and Update</h2>

<ol>
<li><p>BACKUP your <code>.vim</code> directory and <code>.vimrc</code> first.(IMPORTANT!)</p></li>
<li><p><code>cd ~</code> to change directory to your home directory.</p></li>
<li><p>Clone files to your home directory:</p>

<pre><code> git clone https://github.com/bfeng/vim4Lin.git
</code></pre></li>
<li><p>cd to <code>vim4Lin</code> directory and execute the <code>update.sh</code> to get latest version modules:</p>

<pre><code> cd vim4Lin
 ./update.sh
</code></pre></li>
<li><p>make a symbolic link <code>.vim</code> to <code>vim4Lin</code> that you just cloned, or just rename it to <code>.vim</code> also be fine:</p>

<pre><code> ln -s vim4Lin .vim
</code></pre></li>
<li><p>link the vimrc to</p>

<pre><code> ln -s .vim/vimrc .vimrc
</code></pre></li>
<li><p>if you use GUI version VIM, such as MacVim or GVim, you can also link to <code>.gvimrc</code>:</p>

<pre><code> ln -s .vim/gvimrc .gvimrc
</code></pre></li>
<li><p>change directory to <code>~/.vim</code> and execute <code>./update.sh</code> script, it should do all the updates automatically.</p></li>
</ol>


<h2>Features and Key Mappings</h2>

<ol>
<li><p>Resize splited windows automatically, so that you  get a bigger editing room if you&rsquo;re working with a smaller screen. (stole from <a href="https://github.com/garybernhardt">Gary Bernhardt</a>)</p></li>
<li><p>Toggle between working mode and presentation mode by <code>\``z</code>, but only work in GUI version Vim. You can check <a href="http://blog.eddie.com.tw/2012/03/14/switch-to-presentation-mode/">here</a> to see how it looks like. (stolen from <a href="https://github.com/skalnik">Mike Skalnik</a>)</p></li>
<li><p>some usually used key mappings in normal mode:</p>

<ol type="a">
<li><p><code>&lt;F1&gt;</code> to toggle a Calendar window on and off.</p></li>
<li><p><code>&lt;F2&gt;</code> to toggle NERDTree on and off.</p></li>
<li><p><code>&lt;F4&gt;</code> to toggle Taglist window.</p></li>
<li><p><code>&lt;F5&gt;</code> is the script runner, according to it&rsquo;s filetype, it will run Ruby(<em>.rb) ,Python(</em>.py) or Javascript(<em>.js) file(SpiderMonkey is needed), even CoffeeScript(</em>.coffee, but you may have to install CoffeeScript first). If the filetype is VimScript, <code>&lt;F5&gt;</code> will run <code>:source %</code> for you.</p></li>
<li><p><code>&lt;F7&gt;</code> to switch to previous tab, and <code>&lt;F8&gt;</code> to the next tab.</p></li>
<li><p>hit <code>&lt;ctrl&gt;p</code> will launch a quick window to match keywords from your current working directory, not only file name, but also path name. And <code>&lt;ctrl&gt;w u</code> will match from your MRU(Mostly Recent Used) files, which is also frequently used.</p></li>
<li><p>hit <code>\</code> twice to toggle comment on and off.</p></li>
<li><p><code>&lt;tab&gt;</code> and <code>&lt;shift&gt;&lt;tab&gt;</code> to increase and decrease the syntax indentation. By default, <code>&lt;tab&gt;</code> will invoke the code-completion prompt. If you need to input a real <code>&lt;tab&gt;</code> into text, hit <code>&lt;ctrl&gt;v</code> and <code>&lt;tab&gt;</code>.</p></li>
<li><p><code>\``v</code> to open <code>.vimrc</code> in a new tab.</p></li>
<li><p><code>\``0</code> to edit or create <code>README.md</code> in current working directory.</p></li>
</ol>
</li>
<li><p>Remove tailing whitespace automatically while saving.</p></li>
<li><a href="http://ctags.sourceforge.net/">Exuberant Ctags</a> is recommended for the executable of ctags.</li>
</ol>


<h2>Reference</h2>

<p>This work was forked from Eddie Kao&rsquo;s <a href="https://github.com/kaochenlong/eddie-vim">eddie-vim</a>. Thanks!
Some modules, such as which support <code>flex</code> and css colors, are moved out, and add some modules which support <code>latex</code> are added in.
The <code>molokai</code> theme is now supported as the main coding theme and <code>vim-airline</code> replaces the obsolte <code>vim-powerline</code>. Much work were done to focus on the compatibility between the GUI mode and the console mode.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Cuda 5 on Ubuntu 12.10]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/12/Install-cuda-5-on-Ubuntu-12.10/"/>
    <updated>2014-02-12T20:50:11Z</updated>
    <id>http://bfeng.github.io/blog/2014/02/12/Install-cuda-5-on-Ubuntu-12.10</id>
    <content type="html"><![CDATA[<p> By default the cuda is not working on Ubuntu. You may not want to crash your system.&nbsp;Please do exactly follow the instruction step by step. If you are brave enough like me or you are still OK to handle the problem properly even if only the Linux kernel and SSH are working fine, there is no need to backup your system at first.<br /><ol><li>Go to the CUDA official website and download the Getting started guide for your system</li><ol><li><a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></li></ol><li>Read the installation guide from Cuda official website</li><ol><li>install all the&nbsp;prerequisites for your system&nbsp;</li></ol><li>Download Cuda 5 installation</li><ol><li>typically it&rsquo;s a cuda5<em>.run file</li></ol><li>Remove the existing nvidia driver from Ubuntu official reposistory</li><ol><li>$ sudo apt-get remove &ndash;purge nvidia</em></li></ol><li>Change tty to anyone without gui:</li><ol><li>eg. ctrl + alt + F1</li></ol><li>Stop the default dm:</li><ol><li>eg. $ sudo service lightdm stop</li></ol><li>Install gcc and change the default gcc to gcc-4.4:</li><ol><li>sudo apt-get install gcc gcc-4.4</li><li>sudo update-alternatives &ndash;remove-all gcc ( if you have previous configuration )</li><li>sudo update-alternatives &ndash;config gcc&nbsp;( if you have previous configuration )</li><li>sudo update-alternatives &ndash;install /usr/bin/gcc gcc /usr/bin/gcc-4.4 20</li><li>gcc &ndash;version</li><ol><li>gcc 4.4.* or something like that should be printed out</li></ol></ol><li>Run installation:</li><ol><li>chmod +x &lt;cuda&gt;.run</li><li>sudo ./&lt;cuda&gt;.run</li></ol></ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Cuda With Python]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python/"/>
    <updated>2014-02-12T11:13:02-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This article is to introduce you PyCUDA, which is a python framework allows you write <a href="http://www.nvdia.com">NVidia</a>&rsquo;s GPU program in a pythonic way. This framework is consisted of two major parts. The first part is a cuda source code compiler, which compiles the embedded cuda code in python at runtime. The second part is to do the computing by leveraging the <a href="http://www.numpy.org">numpy</a>, which is also a famous python library for scientific computing.</p>

<h2>Start with your first Pycuda program</h2>

<p>This <a href="http://documen.tician.de/pycuda/">website</a> gives out the PyCUDA&rsquo;s <a href="http://documen.tician.de/pycuda/">documentation</a>.</p>

<p>Here is an example from the above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pycuda.autoinit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pycuda.driver</span> <span class="kn">as</span> <span class="nn">drv</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">pycuda.compiler</span> <span class="kn">import</span> <span class="n">SourceModule</span>
</span><span class='line'><span class="n">mod</span> <span class="o">=</span> <span class="n">SourceModule</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">  __global__ void multiply_them(float *dest, float *a, float *b)</span>
</span><span class='line'><span class="s">  {</span>
</span><span class='line'><span class="s">    const int i = threadIdx.x;</span>
</span><span class='line'><span class="s">    dest[i] = a[i] * b[i];</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">  &quot;&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">multiply_them</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span><span class="s">&quot;multiply_them&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">dest</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">multiply_them</span><span class="p">(</span>
</span><span class='line'><span class="n">drv</span><span class="o">.</span><span class="n">Out</span><span class="p">(</span><span class="n">dest</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line'><span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">dest</span><span class="o">-</span><span class="n">a</span><span class="o">*</span><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the <code>SourceModule</code> is used to create a python <code>Module</code> from the cuda source code. This involves the Just-in-time compilation. Then, <code>get_function</code> is used to extract the function from that compiled module, hence the following program can directly call the function like a normal python function.</p>

<p><code>pycuda.driver</code> helps to copy-in and copy-out the data between the main memory and the GPU memory. <code>drv.Out</code> function wraps the variable, which is used in the main memory, in contrast if the variable will be used in GPU memory, use <code>drv.In</code>. Other parameters, like <code>block</code> and <code>grid</code> are the same as used in the normal c cuda program. This blog post gives nice explanation about them: <a href="http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html">http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html</a>.</p>

<h2>Conclusion</h2>

<p>With the help of the some libraries, such as <a href="http://www.numpy.org">numpy</a>, <a href="http://www.scipy.org">scipy</a> and etc., PyCuda gives us another handful method to do the scientific computing. By leveraging the GPU computing power, we can not only process and analyze data sets but also do it efficiently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joli OS: A Chrome-book Like OS]]></title>
    <link href="http://bfeng.github.io/blog/2013/04/10/Joli-OS_-a-Chrome-book-like-OS/"/>
    <updated>2013-04-10T16:08:08Z</updated>
    <id>http://bfeng.github.io/blog/2013/04/10/Joli-OS_-a-Chrome-book-like-OS</id>
    <content type="html"><![CDATA[<p>For a long time, I really envy those who have Chrome book, whose OS is not a normal Linux distribution (of course), but a browser based OS. Chrome OS is a cool way to use computers. However if you want to try it, you can try install it on a virtual machine or if you don&rsquo;t care about money you can buy one.</p>

<p>But if you just want to taste a Chromebook-like experience, worn out of trying it in a virtual machine and don&rsquo;t want to waste money to buy a real one and the most is that you happened to have an old laptop like mine (the one I&rsquo;m typing on), you can try to install Joli OS.</p>

<p><img src="http://www.jolicloud.com/assets/images/site/jolicloud/jolios/jolios@2x.png"></p>

<p><img src="http://4.bp.blogspot.com/-H7ubLimBLpk/UTqx6FS4MUI/AAAAAAAAAeE/nx5N-anQGSw/s1600/Screenshot.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Look for the Jfxtras]]></title>
    <link href="http://bfeng.github.io/blog/2013/03/09/A-brief-look-for-the-jfxtras/"/>
    <updated>2013-03-09T04:12:28Z</updated>
    <id>http://bfeng.github.io/blog/2013/03/09/A-brief-look-for-the-jfxtras</id>
    <content type="html"><![CDATA[<div dir="ltr"><a href="http://feedproxy.google.com/~r/JamesWeaversJavafxBlog/~3/MmAwd91IVc4/a-brief-look-at-the-javafx-jfxtras-project.html">A Brief Look at the JavaFX JFXtras Project</a><br /></div>


<div dir="ltr"><br /></div>


<div class="separator" style="clear: both; text-align: center;"><a href="http://learnjavafx.typepad.com/.a/6a00e54f133d698834017ee6780ae4970d-pi" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="388" src="http://learnjavafx.typepad.com/.a/6a00e54f133d698834017ee6780ae4970d-pi" width="640" /></a></div>


<div dir="ltr"><br /></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pencil: A Charming Prototype Tool]]></title>
    <link href="http://bfeng.github.io/blog/2013/03/09/Pencil_-A-charming-prototype-tool/"/>
    <updated>2013-03-09T04:11:36Z</updated>
    <id>http://bfeng.github.io/blog/2013/03/09/Pencil_-A-charming-prototype-tool</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://pencil.evolus.vn/images/home-ss.jpg"></p>

<p>I was looking for a free, nice prototype tool for web and mobile design for a long time. It&rsquo;s actually not hard to find an useful prototype or mock-up tool, but it&rsquo;s not easy to find a one which is free and easy to use on laptop and desktop which means the software is natively installed.</p>

<p>So, yes, Pencil did the right thing. It is also an add-on for firefox here: <a href="https://addons.mozilla.org/en-us/firefox/addon/pencil">https://addons.mozilla.org/en-us/firefox/addon/pencil</a> . And also the home page here: <a href="http://pencil.evolus.vn/">http://pencil.evolus.vn/</a></p>

<p>Let&rsquo;s talk about its features. Although the on-line editing tools are so popular today, sometimes we just want to memorize the quick responsiveness of native apps. Facilitated by Mozilla&rsquo;s xulrunner, the project provides cross-platform installations. This is very cool feature if you needs to work on different types of operating systems.</p>

<p>It&rsquo;s a nice and easy to use tool for web design. It meant a not so complicated web but good enough for prototyping.</p>

<p><img class="center" src="http://4.bp.blogspot.com/-m7u0fanQR78/UONwNM_OflI/AAAAAAAAAag/sBxKTaB59SM/s1600/Screen+shot+2013-01-01+at+5.23.40+PM.png"></p>

<p>It has the latest Android interface mockups. This is a very cool feature that most Android developers would love, because this tool could create an almost exact the same UI for Android mobiles and tablets. In addition, of course, to make this tool a strong competitor, this tool also supports iOS wireframes and GUIs.</p>

<p><img class="center" src="http://2.bp.blogspot.com/-sRNGEwg-tM0/UONyiNy8V7I/AAAAAAAAAaw/VyGFCOWDwxA/s400/Screen+shot+2013-01-01+at+5.33.20+PM.png"></p>

<p><img class="center" src="http://2.bp.blogspot.com/-1dRVueibJgk/UONyjEZeBcI/AAAAAAAAAa4/ijXmOwXDTT4/s400/Screen+shot+2013-01-01+at+5.33.41+PM.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Virtual Ubuntu Cluster on VirtualBox]]></title>
    <link href="http://bfeng.github.io/blog/2013/02/09/Create-a-virtual-Ubuntu-cluster-on-VirtualBox/"/>
    <updated>2013-02-09T09:27:42Z</updated>
    <id>http://bfeng.github.io/blog/2013/02/09/Create-a-virtual-Ubuntu-cluster-on-VirtualBox</id>
    <content type="html"><![CDATA[<ol>
<li>Create a virtual machine</li>
<li>Change the network to bridge mode</li>
<li>Install Ubuntu Server OS</li>
<li>Setup the hostname to something like &ldquo;node-01&rdquo;</li>
<li>Boot up the new virtual machine</li>
<li>Remove some network rules
<code>sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules</code></li>
<li>Clone the virtual machine</li>
<li>Initialize with a new MAC address</li>
<li>Boot up the cloned virtual machine</li>
<li>Edit /etc/hostname: change &ldquo;node-01&rdquo; to &ldquo;node-02&rdquo;</li>
<li>Edit /etc/hosts: change &ldquo;node-01&rdquo; to &ldquo;node-02&rdquo;</li>
<li>Reboot the cloned virtual machine</li>
<li>Repeat step 7 to 13 until there are enough nodes</li>
</ol>


<p>Note: the ip address of each node should start with &ldquo;192.168.&rdquo; unless you don&rsquo;t have a router.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Even Though Nokia Is Sinking, Qt Is Still Great]]></title>
    <link href="http://bfeng.github.io/blog/2012/11/17/Even-though-Nokia-is-sinking,-Qt-is-still-great/"/>
    <updated>2012-11-17T08:20:09Z</updated>
    <id>http://bfeng.github.io/blog/2012/11/17/Even-though-Nokia-is-sinking,-Qt-is-still-great</id>
    <content type="html"><![CDATA[<p>Today I watched a video of porting Qt application into Android. It looks so fantastic that more and more platforms are emerging, iPhone, Android, Windows, and some others flying on netbooks with touch&nbsp;capabilities. Let&rsquo;s call them smart mobile devices.<br /><br />The typical problem developers are being solving is to make an application and port it to more available platforms. However, porting is so&nbsp;frustrated to programmers because it is like a progress of copying yourself. In contrast, DRY (don&rsquo;t copy yourself) is the first principle of programming.<br /><br />Other technologies which can help to do porting seems great. At least this one looks so.<br /><br /><div class="separator" style="clear: both; text-align: center;"><object width="320" height="266" class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://1.gvt0.com/vi/suPeZ7XC1xk/0.jpg"><param name="movie" value="http://www.youtube.com/v/suPeZ7XC1xk&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><param name="allowFullScreen" value="true" /><embed width="320" height="266"  src="http://www.youtube.com/v/suPeZ7XC1xk&fs=1&source=uds" type="application/x-shockwave-flash" allowfullscreen="true"></embed></object></div><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Writing a Unit Test Is So Necessary for Me?]]></title>
    <link href="http://bfeng.github.io/blog/2012/11/16/Why-writing-a-unit-test-is-so-necessary-for-me_/"/>
    <updated>2012-11-16T20:02:01Z</updated>
    <id>http://bfeng.github.io/blog/2012/11/16/Why-writing-a-unit-test-is-so-necessary-for-me_</id>
    <content type="html"><![CDATA[<p>The simplest answer to this question is that I am too lazy.<br /><br />The more, I&rsquo;m always doing refactoring until I can&rsquo;t tough them. But it&rsquo;s obvious that I don&rsquo;t want to test the code again and again, not to mention testing manually. So unit testing is great to keep me safe that I wouldn&rsquo;t crash the whole system after refactoring.</p>
]]></content>
  </entry>
  
</feed>
