<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fun | My Two Cents]]></title>
  <link href="http://bfeng.github.io/blog/categories/fun/atom.xml" rel="self"/>
  <link href="http://bfeng.github.io/"/>
  <updated>2016-07-20T22:27:36-04:00</updated>
  <id>http://bfeng.github.io/</id>
  <author>
    <name><![CDATA[Bo Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://bfeng.github.io/blog/2014/07/11/hello-octopress/"/>
    <updated>2014-07-11T11:12:47-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/07/11/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is first post from octopress. Octopress is an awesome blogging framework, which provides many handful facilities.</p>

<!--more-->


<h2>Source commands</h2>

<p>Many handful functionalites are wrapped in the <code>Rakefile</code>, which is a definetion file for <code>rake</code> commond. Basicly, the commands defined are:</p>

<ul>
<li>install[]: the initial setup for Octopress to install a theme</li>
<li>generate: generate Jekyll site</li>
<li>watch: watch the site changes and regenerate if necessary</li>
<li>preview: launch a local website and preview in a web browser</li>
<li>new_post[]: make a new post in the <code>_post</code> folder</li>
<li>new_page[]: make a new page</li>
<li>update_style: move sass to sass.old, install sass theme updates</li>
<li>update_source: move source to source.old</li>
<li>gen_deploy: generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch (from <a href="http://octopress.org/docs/deploying/github/" title="Octopress Documentation">1</a>).</li>
</ul>


<h2>Useful plugins</h2>

<h3>Codeblock</h3>

<p>Normally the Markdown paraser in Jekyll can convert the line starts with a double indent into a code block, like this:</p>

<pre><code>This is a line of code!
</code></pre>

<p>However, Codeblock does more than that&ndash;it provides language highlights with/without line numbers.
The following is line of python code.</p>

<p>In the source code, it is typed like this:</p>

<pre><code>{% codeblock lang:python %}
print "Hello, world"
{% endcodeblock %}
</code></pre>

<p>Then, the codeblock above will be rendered like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Video Tag</h3>

<p>The video tag is very userful, when a video is displayed on the web page.
The usage and example can be found here: <a href="http://octopress.org/docs/plugins/video-tag/" title="Video Tag">2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Cuda With Python]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python/"/>
    <updated>2014-02-12T11:13:02-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This article is to introduce you PyCUDA, which is a python framework allows you write <a href="http://www.nvdia.com">NVidia</a>&rsquo;s GPU program in a pythonic way. This framework is consisted of two major parts. The first part is a cuda source code compiler, which compiles the embedded cuda code in python at runtime. The second part is to do the computing by leveraging the <a href="http://www.numpy.org">numpy</a>, which is also a famous python library for scientific computing.</p>

<h2>Start with your first Pycuda program</h2>

<p>This <a href="http://documen.tician.de/pycuda/">website</a> gives out the PyCUDA&rsquo;s <a href="http://documen.tician.de/pycuda/">documentation</a>.</p>

<p>Here is an example from the above.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">pycuda.autoinit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pycuda.driver</span> <span class="kn">as</span> <span class="nn">drv</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">pycuda.compiler</span> <span class="kn">import</span> <span class="n">SourceModule</span>
</span><span class='line'><span class="n">mod</span> <span class="o">=</span> <span class="n">SourceModule</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">global</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">void</span> <span class="n">multiply_them</span><span class="p">(</span><span class="nb">float</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dest</span><span class="p">,</span> <span class="nb">float</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">,</span> <span class="nb">float</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">const</span> <span class="nb">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">multiply_them</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">multiply_them</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dest</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">multiply_them</span><span class="p">(</span>
</span><span class='line'><span class="n">drv</span><span class="o">.</span><span class="n">Out</span><span class="p">(</span><span class="n">dest</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line'><span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">dest</span><span class="o">-</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In this example, the <code>SourceModule</code> is used to create a python <code>Module</code> from the cuda source code. This involves the Just-in-time compilation. Then, <code>get_function</code> is used to extract the function from that compiled module, hence the following program can directly call the function like a normal python function.</p>

<p><code>pycuda.driver</code> helps to copy-in and copy-out the data between the main memory and the GPU memory. <code>drv.Out</code> function wraps the variable, which is used in the main memory, in contrast if the variable will be used in GPU memory, use <code>drv.In</code>. Other parameters, like <code>block</code> and <code>grid</code> are the same as used in the normal c cuda program. This blog post gives nice explanation about them: <a href="http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html">http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html</a>.</p>

<h2>Conclusion</h2>

<p>With the help of the some libraries, such as <a href="http://www.numpy.org">numpy</a>, <a href="http://www.scipy.org">scipy</a> and etc., PyCuda gives us another handful method to do the scientific computing. By leveraging the GPU computing power, we can not only process and analyze data sets but also do it efficiently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joli OS: A Chrome-book Like OS]]></title>
    <link href="http://bfeng.github.io/blog/2013/04/10/Joli-OS_-a-Chrome-book-like-OS/"/>
    <updated>2013-04-10T16:08:08Z</updated>
    <id>http://bfeng.github.io/blog/2013/04/10/Joli-OS_-a-Chrome-book-like-OS</id>
    <content type="html"><![CDATA[<p>For a long time, I really envy those who have Chrome book, whose OS is not a normal Linux distribution (of course), but a browser based OS. Chrome OS is a cool way to use computers. However if you want to try it, you can try install it on a virtual machine or if you don&rsquo;t care about money you can buy one.</p>

<p>But if you just want to taste a Chromebook-like experience, worn out of trying it in a virtual machine and don&rsquo;t want to waste money to buy a real one and the most is that you happened to have an old laptop like mine (the one I&rsquo;m typing on), you can try to install Joli OS.</p>

<p><img class="<a" src="href="http://www.jolicloud.com/assets/images/site/jolicloud/jolios/jolios@2x.png">http://www.jolicloud.com/assets/images/site/jolicloud/jolios/jolios@2x.png</a>&#8221;></p>

<p><img class="<a" src="href="http://4.bp.blogspot.com/-H7ubLimBLpk/UTqx6FS4MUI/AAAAAAAAAeE/nx5N-anQGSw/s1600/Screenshot.png">http://4.bp.blogspot.com/-H7ubLimBLpk/UTqx6FS4MUI/AAAAAAAAAeE/nx5N-anQGSw/s1600/Screenshot.png</a>&#8221;></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://bfeng.github.io/blog/2012/02/25/Hello,-world!/"/>
    <updated>2012-02-25T04:01:44Z</updated>
    <id>http://bfeng.github.io/blog/2012/02/25/Hello,-world!</id>
    <content type="html"><![CDATA[<p>Hello, world! is usually used in the start up of a tutorial to a programming language. However, here, it is used as my first blog.</p>
]]></content>
  </entry>
  
</feed>
