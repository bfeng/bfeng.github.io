<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gpu | My Two Cents]]></title>
  <link href="http://bfeng.github.io/blog/categories/gpu/atom.xml" rel="self"/>
  <link href="http://bfeng.github.io/"/>
  <updated>2016-07-20T22:27:36-04:00</updated>
  <id>http://bfeng.github.io/</id>
  <author>
    <name><![CDATA[Bo Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Image Processing With PyCuda]]></title>
    <link href="http://bfeng.github.io/blog/2014/07/09/image-processing-with-pycuda/"/>
    <updated>2014-07-09T15:57:20-04:00</updated>
    <id>http://bfeng.github.io/blog/2014/07/09/image-processing-with-pycuda</id>
    <content type="html"><![CDATA[<p>This blog shows an example of how to use GPU to convert color images to grayscale.</p>

<!--more-->


<h2>Build Cuda source module with Python</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">module</span> <span class="o">=</span> <span class="n">SourceModule</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">global</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">void</span> <span class="n">histograms</span><span class="p">(</span><span class="nb">float</span> <span class="o">*</span> <span class="n">hist_rgb</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">char</span> <span class="o">*</span> <span class="n">pix</span><span class="p">,</span> <span class="nb">int</span> <span class="n">total</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nb">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blockDim</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="o">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">idx</span> <span class="o">&gt;=</span> <span class="n">total</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">__shared__</span> <span class="nb">float</span> <span class="n">local_hist</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>    <span class="n">local_hist</span><span class="p">[</span><span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">__syncthreads</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">int</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pix</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>  <span class="n">atomicAdd</span><span class="p">((</span><span class="nb">float</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">local_hist</span><span class="p">[</span><span class="n">pixel</span><span class="p">],</span> <span class="mf">256.0</span><span class="o">/</span><span class="n">total</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>    <span class="n">atomicAdd</span><span class="p">((</span><span class="nb">float</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">hist_rgb</span><span class="p">[</span><span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span><span class="p">],</span> <span class="n">local_hist</span><span class="p">[</span><span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">__global__</span> <span class="n">void</span> <span class="n">enhance</span><span class="p">(</span><span class="n">unsigned</span> <span class="n">char</span> <span class="o">*</span> <span class="n">pix</span><span class="p">,</span> <span class="nb">float</span> <span class="o">*</span> <span class="n">hist_rgb</span><span class="p">,</span> <span class="nb">int</span> <span class="n">total</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blockDim</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockIdx</span><span class="o">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">idx</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">total</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">int</span> <span class="n">pixel</span> <span class="o">=</span> <span class="n">pix</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>  <span class="n">pix</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">)(</span><span class="n">hist_rgb</span><span class="p">[</span><span class="n">pixel</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;)</span>
</span><span class='line'><span class="s">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;histograms  = module.get_function(&amp;ldquo;histograms&amp;rdquo;)</span>
</span><span class='line'><span class="s">enhance     = module.get_function(&amp;ldquo;enhance&amp;rdquo;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Use within Python code</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">THREADS_PER_BLOCK</span> <span class="o">=</span> <span class="mi">512</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">gpu_enhanceImage</span><span class="p">(</span><span class="n">pic</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># convert to array</span>
</span><span class='line'>    <span class="n">pix</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'>    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">pic</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># ------------------------------------------------</span>
</span><span class='line'><span class="c"># accelerate the following part as much as possible using GPU</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># compute histograms for RGB components separately</span>
</span><span class='line'><span class="c"># the value range for each pixel is [0,255]</span>
</span><span class='line'><span class="n">hist_rgb</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">256</span>
</span><span class='line'>
</span><span class='line'><span class="n">hist_rgb_buffer</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="n">hist_rgb</span><span class="p">)</span>
</span><span class='line'><span class="n">pix</span> <span class="o">=</span> <span class="n">pix</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hist_rgb_gpu</span> <span class="o">=</span> <span class="n">cuda</span><span class="o">.</span><span class="n">mem_alloc</span><span class="p">(</span><span class="n">hist_rgb_buffer</span><span class="o">.</span><span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'><span class="n">pix_gpu</span> <span class="o">=</span> <span class="n">cuda</span><span class="o">.</span><span class="n">mem_alloc</span><span class="p">(</span><span class="n">pix</span><span class="o">.</span><span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">hist_rgb_buffer</span><span class="p">)</span>
</span><span class='line'><span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">pix_gpu</span><span class="p">,</span> <span class="n">pix</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">histograms</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">pix_gpu</span><span class="p">,</span>
</span><span class='line'>     <span class="n">numpy</span><span class="o">.</span><span class="n">int32</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'>     <span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>     <span class="n">grid</span><span class="o">=</span><span class="p">((</span><span class="n">total</span> <span class="o">+</span> <span class="n">THREADS_PER_BLOCK</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_dtoh</span><span class="p">(</span><span class="n">hist_rgb_buffer</span><span class="p">,</span> <span class="n">hist_rgb_gpu</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hist_rgb</span> <span class="o">=</span> <span class="n">hist_rgb_buffer</span>
</span><span class='line'>
</span><span class='line'><span class="c"># compute the accumulative histograms</span>
</span><span class='line'><span class="k">for</span> <span class="n">intensity</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">256</span><span class="p">):</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="p">]</span> <span class="o">+</span> <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="c"># take care of rounding error</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="mi">256</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hist_rgb</span><span class="p">[</span><span class="n">intensity</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'>
</span><span class='line'><span class="c"># enhance the picture according to the inversed histgram</span>
</span><span class='line'><span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_htod</span><span class="p">(</span><span class="n">hist_rgb_gpu</span><span class="p">,</span> <span class="n">hist_rgb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">enhance</span><span class="p">(</span><span class="n">pix_gpu</span><span class="p">,</span> <span class="n">hist_rgb_gpu</span><span class="p">,</span>
</span><span class='line'>  <span class="n">numpy</span><span class="o">.</span><span class="n">int32</span><span class="p">(</span><span class="n">total</span><span class="p">),</span>
</span><span class='line'>  <span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">=</span><span class="p">((</span><span class="n">total</span> <span class="o">+</span> <span class="n">THREADS_PER_BLOCK</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">THREADS_PER_BLOCK</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cuda</span><span class="o">.</span><span class="n">memcpy_dtoh</span><span class="p">(</span><span class="n">pix</span><span class="p">,</span> <span class="n">pix_gpu</span><span class="p">)</span>
</span><span class='line'><span class="c"># -----------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c"># save the picture</span>
</span><span class='line'><span class="n">pic</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">pix</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">pic</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>For each image, the function <code>enhanceImage</code> does three steps enhancement:

<ul>
<li>calculate the histogram of 256 color used in the image</li>
<li>accumulate the histogram calculated in step one</li>
<li>assign each pixel of the image according to the inversed histogram</li>
</ul>
</li>
<li>In step one and three, we could parallelize the program in GPU. Step two is a simple 256 iteration loop which should be pretty fast on CPU and there is data dependency, therefore we’d better do it in CPU.</li>
<li>To do the acceleration in GPU, my implementation uses one thread per pixel of the image. Each thread reads the pixel out and adds its value to the appropriated position in the histogram.

<ul>
<li>Threads in the same block can share the local memory which is faster than the global memory, so in each block the threads are using the shared memory to calculate the histogram.</li>
<li>After the local shared histogram is calculated out, the first 256 threads add the value of the local histogram to the global one.</li>
</ul>
</li>
<li>The data movement between CPU and GPU via Cuda APIs:

<ul>
<li><code>cudaMelloc</code> can allocate the space in GPU’s display memory</li>
<li><code>cudaMellocpy</code> can copy the data from the main memory to the display memory and vice versa.</li>
<li><code>cudaFree</code> can release the memory space used in GPU</li>
</ul>
</li>
<li>Optimization:

<ul>
<li>Use shared memory as much as possible. Because the shared memory in a block is 100x faster than the global memory.</li>
<li>In my implementation, <code>atomicAdd</code> is used, because the histogram might be accessed by more than one thread. However, this could be a performance bottleneck of the overall GPU program. So I tried to use a large global memory to avoid the conflicts, but the memory was becoming the new performance bottleneck. To keep the program neat, I still decided to use <code>atomicAdd</code>.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Cuda 5 on Ubuntu 12.10]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/12/Install-cuda-5-on-Ubuntu-12.10/"/>
    <updated>2014-02-12T20:50:11Z</updated>
    <id>http://bfeng.github.io/blog/2014/02/12/Install-cuda-5-on-Ubuntu-12.10</id>
    <content type="html"><![CDATA[<p> By default the cuda is not working on Ubuntu. You may not want to crash your system.&nbsp;Please do exactly follow the instruction step by step. If you are brave enough like me or you are still OK to handle the problem properly even if only the Linux kernel and SSH are working fine, there is no need to backup your system at first.<br /><ol><li>Go to the CUDA official website and download the Getting started guide for your system</li><ol><li><a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></li></ol><li>Read the installation guide from Cuda official website</li><ol><li>install all the&nbsp;prerequisites for your system&nbsp;</li></ol><li>Download Cuda 5 installation</li><ol><li>typically it&rsquo;s a cuda5<em>.run file</li></ol><li>Remove the existing nvidia driver from Ubuntu official reposistory</li><ol><li>$ sudo apt-get remove &ndash;purge nvidia</em></li></ol><li>Change tty to anyone without gui:</li><ol><li>eg. ctrl + alt + F1</li></ol><li>Stop the default dm:</li><ol><li>eg. $ sudo service lightdm stop</li></ol><li>Install gcc and change the default gcc to gcc-4.4:</li><ol><li>sudo apt-get install gcc gcc-4.4</li><li>sudo update-alternatives &ndash;remove-all gcc ( if you have previous configuration )</li><li>sudo update-alternatives &ndash;config gcc&nbsp;( if you have previous configuration )</li><li>sudo update-alternatives &ndash;install /usr/bin/gcc gcc /usr/bin/gcc-4.4 20</li><li>gcc &ndash;version</li><ol><li>gcc 4.4.* or something like that should be printed out</li></ol></ol><li>Run installation:</li><ol><li>chmod +x &lt;cuda&gt;.run</li><li>sudo ./&lt;cuda&gt;.run</li></ol></ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Cuda With Python]]></title>
    <link href="http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python/"/>
    <updated>2014-02-12T11:13:02-05:00</updated>
    <id>http://bfeng.github.io/blog/2014/02/12/play-cuda-with-python</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This article is to introduce you PyCUDA, which is a python framework allows you write <a href="http://www.nvdia.com">NVidia</a>&rsquo;s GPU program in a pythonic way. This framework is consisted of two major parts. The first part is a cuda source code compiler, which compiles the embedded cuda code in python at runtime. The second part is to do the computing by leveraging the <a href="http://www.numpy.org">numpy</a>, which is also a famous python library for scientific computing.</p>

<h2>Start with your first Pycuda program</h2>

<p>This <a href="http://documen.tician.de/pycuda/">website</a> gives out the PyCUDA&rsquo;s <a href="http://documen.tician.de/pycuda/">documentation</a>.</p>

<p>Here is an example from the above.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">pycuda.autoinit</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pycuda.driver</span> <span class="kn">as</span> <span class="nn">drv</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">pycuda.compiler</span> <span class="kn">import</span> <span class="n">SourceModule</span>
</span><span class='line'><span class="n">mod</span> <span class="o">=</span> <span class="n">SourceModule</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="k">global</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">void</span> <span class="n">multiply_them</span><span class="p">(</span><span class="nb">float</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dest</span><span class="p">,</span> <span class="nb">float</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">,</span> <span class="nb">float</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">const</span> <span class="nb">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="o">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">multiply_them</span> <span class="o">=</span> <span class="n">mod</span><span class="o">.</span><span class="n">get_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">multiply_them</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">numpy</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dest</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">multiply_them</span><span class="p">(</span>
</span><span class='line'><span class="n">drv</span><span class="o">.</span><span class="n">Out</span><span class="p">(</span><span class="n">dest</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">drv</span><span class="o">.</span><span class="n">In</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
</span><span class='line'><span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">grid</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">dest</span><span class="o">-</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In this example, the <code>SourceModule</code> is used to create a python <code>Module</code> from the cuda source code. This involves the Just-in-time compilation. Then, <code>get_function</code> is used to extract the function from that compiled module, hence the following program can directly call the function like a normal python function.</p>

<p><code>pycuda.driver</code> helps to copy-in and copy-out the data between the main memory and the GPU memory. <code>drv.Out</code> function wraps the variable, which is used in the main memory, in contrast if the variable will be used in GPU memory, use <code>drv.In</code>. Other parameters, like <code>block</code> and <code>grid</code> are the same as used in the normal c cuda program. This blog post gives nice explanation about them: <a href="http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html">http://www.resultsovercoffee.com/2011/02/cuda-blocks-and-grids.html</a>.</p>

<h2>Conclusion</h2>

<p>With the help of the some libraries, such as <a href="http://www.numpy.org">numpy</a>, <a href="http://www.scipy.org">scipy</a> and etc., PyCuda gives us another handful method to do the scientific computing. By leveraging the GPU computing power, we can not only process and analyze data sets but also do it efficiently.</p>
]]></content>
  </entry>
  
</feed>
